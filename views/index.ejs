<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script src="/socket.io/socket.io.js"></script>
</head>
<body>
    <video autoplay id="myVideoTag"></video>
    <video autoplay id="otherVideoTag"></video>
    <div>
        <input type="file" id="sendFile"/><br/>
        <progress id="fileProgress" value=“1” max="100"></progress>
        <a id="receivedFileLink"></a>
        <hr>
    </div>
    <div>
        <label>Your Name</label><input type="text" id="myName">
        <label>Message</label><input type="text" id="myMassage">
        <input type="submit" id="sendMessage">
        <div id="chatArea">Message Output: <br/></div>
        <div id="signalingArea">Singnaling Output: <br/></div>
    </div>

    <script>
        window.RTCPeerConnection = window.RTCPeerConnection || window.webkitRTCPeerConnection;
        window.RTCIceCandidate = window.RTCIceCandidate;

        const socket = io();
        const myName = document.querySelector("#myName");
        const myMessage = document.querySelector("#myMassage");
        const sendMessage = document.querySelector("#sendMessage");
        const chatArea = document.querySelector("#chatArea");
        const signalingArea = document.querySelector("#signalingArea");
        const sendFile = document.querySelector("input#sendFile");
        const fileProgress = document.querySelector("progress#fileProgress");
        const downloadLink = document.querySelector('a#receivedFileLink');
        const chat_room = 'chat';
        const signal_room = 'signal_room';
	    const files_room = 'files_room';
        const myVideoArea = document.querySelector("#myVideoTag");
        const otherVideoArea = document.querySelector("#otherVideoTag");
        const configuration = {
            'iceServers': [{
                url: 'stun:stun.l.google.com:19302'
            }]
        };
        let pc;
        const dataChannelOptions = {
            ordered: false,
            maxRetransmitTime: 1000,
        };
        let dataChannel;
        let receivedFileName;
        let receivedFileSize;
        let fileBuffer = [];
        let fileSize = 0;
        let isNegotiating = false;

        socket.on('connected', () => {
            console.log('connected');
            socket.json.emit('init', { chat_room, signal_room, files_room });
            socket.json.emit('signal', { type: 'user_here', message: 'Are you ready for a call?', room: signal_room});
        });

        socket.on('message', data => {
            displayMessage(data.author + ': ' + data.message);
        });

        socket.on('signaling_message', data => {
            displaySignalMessage(data.type);

            if (!pc)
                startSignaling();
            
            if (data.type != 'user_here') {
                const message = JSON.parse(data.message);
                if (message.sdp) {
                    pc.setRemoteDescription(
                        new RTCSessionDescription(message.sdp),
                        () => {
                            if (pc.remoteDescription.type == "offer") {
                                pc.createAnswer(localDescCreated, logError);
                            }
                        },
                        logError
                    )
                } else {
                    pc.addIceCandidate(new RTCIceCandidate(message.candidate));
                }
            }
        });

        socket.on('files', function(data) {
            receivedFileName = data.filename;
            receivedFileSize = data.filesize;
            displaySignalMessage("websockets says the file on it's way is " + receivedFileName + " (" + receivedFileSize + ")");
        });

        function startSignaling() {
            displaySignalMessage('starting signaling ...');

            pc = new RTCPeerConnection(configuration);
            dataChannel = pc.createDataChannel('textMessages', dataChannelOptions);
            dataChannel.onopen = dataChannelStateChanged;
            pc.ondatachannel = receiveDataChannel;

            pc.onicecandidate = function (e) {
                if (e.candidate) {
                    socket.json.emit('signal', {
                        type: 'ice candidate',
                        message: JSON.stringify({ "candidate": e.candidate }),
                        room: signal_room
                    });
                }
                displaySignalMessage("completed that ice candidate...");
            };

            pc.onnegotiationneeded = function () {
                if (isNegotiating) {
                    console.log("SKIP nested negotiations");
                    return;
                }
                isNegotiating = true;
                displaySignalMessage("on negotiation called");
                pc.createOffer(localDescCreated, logError);
            }

            pc.onsignalingstatechange = (e) => {
                isNegotiating = (pc.signalingState != "stable");
            }

            pc.onaddstream = function (e) {
                displaySignalMessage("going to add their stream...");
                otherVideoArea.srcObject = e.stream;
            };

            navigator.mediaDevices = navigator.mediaDevices || ((navigator.mozGetUserMedia || navigator.webkitGetUserMedia) ? {
                getUserMedia: function(c) {
                    return new Promise(function(y, n) {
                        (navigator.mozGetUserMedia ||
                        navigator.webkitGetUserMedia).call(navigator, c, y, n);
                    });
                }
            } : null);

            if (!navigator.mediaDevices) {
                console.log("getUserMedia() not supported.");
            }

            const constraints = { audio: false, video: { width: 400, height: 400 } };

            navigator.mediaDevices.getUserMedia(constraints)
            .then(function(stream) {
                myVideoArea.srcObject = stream;
                pc.addStream(stream);
            })
            .catch((err) => logError(err));
        }

        function dataChannelStateChanged() {
            if (dataChannel.readyState === 'open') {
                displaySignalMessage("Data Channel open");
                dataChannel.onmessage = receiveDataChannelMessage;
            }
        }

        function receiveDataChannel(event) {
            displaySignalMessage("Receiving a data channel");
            dataChannel = event.channel;
            dataChannel.onmessage = receiveDataChannelMessage;
        }

        function receiveDataChannelMessage(e) {
            displaySignalMessage("Incoming Message");
            displayMessage("From DataChannel: " + e.data);

            fileBuffer.push(event.data);
            fileSize += event.data.byteLength;
            fileProgress.value = fileSize;

            if (fileSize === receivedFileSize) {
                var received = new window.Blob(fileBuffer);
                fileBuffer = [];    
                downloadLink.href = URL.createObjectURL(received);
                downloadLink.download = receivedFileName;
                downloadLink.appendChild(document.createTextNode(receivedFileName + "(" + fileSize + ") bytes"));
            }
        }

        function localDescCreated(desc) {
            pc.setLocalDescription(desc, function () {
                displaySignalMessage("sending local description");
                socket.emit('signal', {
                    type:"SDP",
                    message: JSON.stringify({ sdp: pc.localDescription }),
                    room: signal_room}
                );
            }, logError);
        }

        function logError(error) {
            console.log(error.name + ": " + error.message);
        }

        socket.on('announce', function(data) {
            displayMessage(data.message);
        });

        function displayMessage(message) {
            chatArea.innerHTML = chatArea.innerHTML + '<br/>' + message;
        }

        function displaySignalMessage(message) {
            signalingArea.innerHTML = signalingArea.innerHTML + '<br/>' + message;
        }

        sendMessage.addEventListener('click', (e) => {
            socket.emit('send', {"author": myName.value, "message": myMessage.value, "room": chat_room})
            dataChannel.send(myName.value + ' says ' + myMessage.value);
            e.preventDefault();
        }, false);

        sendFile.addEventListener('change', function(evt){
            const file = sendFile.files[0];
            displaySignalMessage("sending file " + file.name + " (" + file.size + ") ...");
            socket.emit('files',{"filename": file.name, "filesize": file.size, "room": files_room});
        
            fileProgress.max = file.size;
            const chunkSize = 16384;
            const sliceFile = function(offset) {
                const reader = new window.FileReader();
                reader.onload = (function() {
                    return function(e) {
                        dataChannel.send(e.target.result);
                        if (file.size > offset + e.target.result.byteLength) {
                            window.setTimeout(sliceFile, 0, offset + chunkSize);
                        }
                        fileProgress.value = offset + e.target.result.byteLength;
                    };
                })(file);
                const slice = file.slice(offset, offset + chunkSize);
                reader.readAsArrayBuffer(slice);
            };
            sliceFile(0);
        }, false);
    </script>
</body>
</html>