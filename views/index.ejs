<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script src="/socket.io/socket.io.js"></script>
</head>
<body>
    <video autoplay id="myVideoTag"></video>
    <video autoplay id="otherVideoTag"></video>
    <div>
        <label>Your Name</label><input type="text" id="myName">
        <label>Message</label><input type="text" id="myMassage">
        <input type="submit" id="sendMessage">
        <div id="chatArea">Message Output: <br/></div>
        <div id="signalingArea">Singnaling Output: <br/></div>
    </div>

    <script>
        const socket = io();
        const myName = document.querySelector("#myName");
        const myMessage = document.querySelector("#myMassage");
        const sendMessage = document.querySelector("#sendMessage");
        const chatArea = document.querySelector("#chatArea");
        const signalingArea = document.querySelector("#signalingArea");
        const chat_room = 'chat';
        const signal_room = 'signal_room';
        const myVideoArea = document.querySelector("#myVideoTag");
        const otherVideoArea = document.querySelector("#otherVideoTag");

        socket.on('connected', () => {
            console.log('connected');
            socket.json.emit('init', { chat_room, signal_room });
            socket.json.emit('signal', { type: 'user_here', message: 'Are you ready for a call?', room: signal_room});
        });

        socket.on('message', function(data) {
            displayMessage(data.author + ': ' + data.message);
        });

        socket.on('signaling_message', function(data) {
            displaySignalingMessage(data.type + ': ' + data.message);
        });

        socket.on('announce', function(data) {
            displayMessage(data.message);
        });

        function displayMessage(message) {
            chatArea.innerHTML = chatArea.innerHTML + '<br/>' + message;
        }

        function displaySignalingMessage(message) {
            signalingArea.innerHTML = signalingArea.innerHTML + '<br/>' + message;
        }

        sendMessage.addEventListener('click', (e) => {
            socket.emit('send', {"author": myName.value, "message": myMessage.value, "room": room})
            e.preventDefault();
        }, false);

        // navigator.mediaDevices = navigator.mediaDevices || ((navigator.mozGetUserMedia || navigator.webkitGetUserMedia) ? {
        //     getUserMedia: function(c) {
        //         return new Promise(function(y, n) {
        //             (navigator.mozGetUserMedia ||
        //             navigator.webkitGetUserMedia).call(navigator, c, y, n);
        //         });
        //     }
        // } : null);

        // if (!navigator.mediaDevices) {
        //     console.log("getUserMedia() not supported.");
        // }

        // const constraints = { audio: true, video: { width: 400, height: 400 } };

        // navigator.mediaDevices.getUserMedia(constraints)
        // .then(function(stream) {
        //     var video = document.querySelector('video');
        //     video.srcObject = stream
        //     video.onloadedmetadata = function(e) {
        //         video.play();
        //     };
        // })
        // .catch(function(err) {
        //     console.log(err.name + ": " + err.message);
        // });
    </script>
</body>
</html>